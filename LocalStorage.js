// Generated by CoffeeScript 1.9.3
(function() {
  var JSONStorage, LocalStorage, QUOTA_EXCEEDED_ERR, StorageEvent, _emptyDirectory, _rm, events, fs, path,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  path = require('path');

  fs = require('fs');

  events = require('events');

  _emptyDirectory = function(target) {
    var i, len, p, ref, results;
    ref = fs.readdirSync(target);
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      p = ref[i];
      results.push(_rm(path.join(target, p)));
    }
    return results;
  };

  _rm = function(target) {
    if (fs.statSync(target).isDirectory()) {
      _emptyDirectory(target);
      return fs.rmdirSync(target);
    } else {
      return fs.unlinkSync(target);
    }
  };

  QUOTA_EXCEEDED_ERR = (function(superClass) {
    extend(QUOTA_EXCEEDED_ERR, superClass);

    function QUOTA_EXCEEDED_ERR(message) {
      this.message = message != null ? message : 'Unknown error.';
      if (Error.captureStackTrace != null) {
        Error.captureStackTrace(this, this.constructor);
      }
      this.name = this.constructor.name;
    }

    QUOTA_EXCEEDED_ERR.prototype.toString = function() {
      return this.name + ": " + this.message;
    };

    return QUOTA_EXCEEDED_ERR;

  })(Error);

  StorageEvent = (function() {
    function StorageEvent(key1, oldValue1, newValue1, url, storageArea) {
      this.key = key1;
      this.oldValue = oldValue1;
      this.newValue = newValue1;
      this.url = url;
      this.storageArea = storageArea != null ? storageArea : 'localStorage';
    }

    return StorageEvent;

  })();

  LocalStorage = (function(superClass) {
    var MetaKey, createMap;

    extend(LocalStorage, superClass);

    function LocalStorage(location, quota) {
      this.location = location;
      this.quota = quota != null ? quota : 5 * 1024 * 1024;
      if (!(this instanceof LocalStorage)) {
        return new LocalStorage(this.location, this.quota);
      }
      this.length = 0;
      this.bytesInUse = 0;
      this.keys = [];
      this.metaKeyMap = createMap();
      this.eventUrl = "pid:" + process.pid;
      this._init();
      this.QUOTA_EXCEEDED_ERR = QUOTA_EXCEEDED_ERR;
    }

    MetaKey = (function() {
      function MetaKey(key1, index1) {
        this.key = key1;
        this.index = index1;
        if (!(this instanceof MetaKey)) {
          return new MetaKey(this.key, this.index);
        }
      }

      return MetaKey;

    })();

    createMap = function() {
      var Map;
      Map = function() {};
      Map.prototype = Object.create(null);
      return new Map();
    };

    LocalStorage.prototype._init = function() {
      var _MetaKey, _decodedKey, _keys, i, index, k, len, stat;
      if (fs.existsSync(this.location)) {
        if (!fs.statSync(this.location).isDirectory()) {
          throw new Error("A file exists at the location '" + this.location + "' when trying to create/open localStorage");
        }
      }
      this.bytesInUse = 0;
      this.length = 0;
      if (!fs.existsSync(this.location)) {
        fs.mkdirSync(this.location);
        return;
      }
      _keys = fs.readdirSync(this.location);
      for (index = i = 0, len = _keys.length; i < len; index = ++i) {
        k = _keys[index];
        _decodedKey = decodeURIComponent(k);
        this.keys.push(_decodedKey);
        _MetaKey = new MetaKey(k, index);
        this.metaKeyMap[_decodedKey] = _MetaKey;
        stat = this.getStat(k);
        if ((stat != null ? stat.size : void 0) != null) {
          _MetaKey.size = stat.size;
          this.bytesInUse += stat.size;
        }
      }
      return this.length = _keys.length;
    };

    LocalStorage.prototype.setItem = function(key, value) {
      var encodedKey, evnt, existsBeforeSet, filename, hasListeners, metaKey, oldLength, oldValue, valueString, valueStringLength;
      hasListeners = events.EventEmitter.listenerCount(this, 'storage');
      oldValue = null;
      if (hasListeners) {
        oldValue = this.getItem(key);
      }
      key = key.toString();
      encodedKey = encodeURIComponent(key);
      filename = path.join(this.location, encodedKey);
      valueString = value.toString();
      valueStringLength = valueString.length;
      metaKey = this.metaKeyMap[key];
      existsBeforeSet = !!metaKey;
      if (existsBeforeSet) {
        oldLength = metaKey.size;
      } else {
        oldLength = 0;
      }
      if (this.bytesInUse - oldLength + valueStringLength > this.quota) {
        throw new QUOTA_EXCEEDED_ERR();
      }
      fs.writeFileSync(filename, valueString, 'utf8');
      if (!existsBeforeSet) {
        metaKey = new MetaKey(encodedKey, (this.keys.push(key)) - 1);
        metaKey.size = valueStringLength;
        this.metaKeyMap[key] = metaKey;
        this.length += 1;
        this.bytesInUse += valueStringLength;
      }
      if (hasListeners) {
        evnt = new StorageEvent(key, oldValue, value, this.eventUrl);
        return this.emit('storage', evnt);
      }
    };

    LocalStorage.prototype.getItem = function(key) {
      var filename, metaKey;
      key = key.toString();
      console.log('keys' + this.length);
      metaKey = this.metaKeyMap[key];
      if (!!metaKey) {
        filename = path.join(this.location, metaKey.key);
        return fs.readFileSync(filename, 'utf8');
      } else {
        return null;
      }
    };

    LocalStorage.prototype.getStat = function(key) {
      var filename;
      key = key.toString();
      filename = path.join(this.location, encodeURIComponent(key));
      if (fs.existsSync(filename)) {
        return fs.statSync(filename);
      } else {
        return null;
      }
    };

    LocalStorage.prototype.removeItem = function(key) {
      var evnt, filename, hasListeners, metaKey, oldValue;
      key = key.toString();
      metaKey = this.metaKeyMap[key];
      if (!!metaKey) {
        hasListeners = events.EventEmitter.listenerCount(this, 'storage');
        oldValue = null;
        if (hasListeners) {
          oldValue = this.getItem(key);
        }
        delete this.metaKeyMap[key];
        this.length -= 1;
        this.bytesInUse -= metaKey.size;
        filename = path.join(this.location, metaKey.key);
        this.keys.splice(metaKey.index, 1);
        _rm(filename);
        if (hasListeners) {
          evnt = new StorageEvent(key, oldValue, null, this.eventUrl);
          return this.emit('storage', evnt);
        }
      }
    };

    LocalStorage.prototype.key = function(n) {
      return this.keys[n];
    };

    LocalStorage.prototype.clear = function() {
      var evnt;
      _emptyDirectory(this.location);
      this.metaKeyMap = createMap();
      this.keys = [];
      this.length = 0;
      this.bytesInUse = 0;
      if (events.EventEmitter.listenerCount(this, 'storage')) {
        evnt = new StorageEvent(null, null, null, this.eventUrl);
        return this.emit('storage', evnt);
      }
    };

    LocalStorage.prototype.getBytesInUse = function() {
      return this.bytesInUse;
    };

    LocalStorage.prototype._deleteLocation = function() {
      _rm(this.location);
      this.metaKeyMap = {};
      this.keys = [];
      this.length = 0;
      return this.bytesInUse = 0;
    };

    return LocalStorage;

  })(events.EventEmitter);

  JSONStorage = (function(superClass) {
    extend(JSONStorage, superClass);

    function JSONStorage() {
      return JSONStorage.__super__.constructor.apply(this, arguments);
    }

    JSONStorage.prototype.setItem = function(key, value) {
      var newValue;
      newValue = JSON.stringify(value);
      return JSONStorage.__super__.setItem.call(this, key, newValue);
    };

    JSONStorage.prototype.getItem = function(key) {
      return JSON.parse(JSONStorage.__super__.getItem.call(this, key));
    };

    return JSONStorage;

  })(LocalStorage);

  exports.LocalStorage = LocalStorage;

  exports.JSONStorage = JSONStorage;

  exports.QUOTA_EXCEEDED_ERR = QUOTA_EXCEEDED_ERR;

}).call(this);
